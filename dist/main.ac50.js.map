{"version":3,"sources":["webpack:///./lib/date-range-picker.js","webpack:///./src/index.js"],"names":["nextMonth","date","newDate","Date","getMonth","setFullYear","getFullYear","setMonth","monthsIndex","0","1","2","3","4","5","6","7","8","9","10","11","days","date_range_picker_month","[object Object]","dom","state","attrs","month","id","className","initialDate","classList","add","parentElement","Promise","resolve","setTimeout","remove","year","d","setHours","push","setDate","getDate","getDaysInMonth","startDay","getDay","empties","Array","fill","view","firstDate","secondDate","mithril_default","map","date_range_picker_date","class","getTime","setDateClassName","first","second","document","removeEventListener","close","data","arrivalProp","departureProp","show","stream_default","toggle","e","activeElement","contains","a","redraw","addEventListener","monthOne","monthTwo","months","key","val","movement","placeholder","onclick","stopPropagation","onfocus","onbeforeremove","prevMonth","mon","trip","location","arrivalDate","departureDate","src_demo","vnode","lib_date_range_picker","JSON","stringify","mount","body"],"mappings":"gJAgBA,SAAAA,EAAAC,GACA,MAAAC,EAAA,IAAAC,KAQA,OAPAF,EAAAG,WAAA,IACAF,EAAAG,YAAAJ,EAAAK,eACAJ,EAAAK,SAAAN,EAAAG,WAAA,KAEAF,EAAAK,SAAA,GACAL,EAAAG,YAAAJ,EAAAK,cAAA,IAEAJ,EAGA,MAAAM,GACAC,EAAA,UACAC,EAAA,WACAC,EAAA,QACAC,EAAA,QACAC,EAAA,MACAC,EAAA,OACAC,EAAA,OACAC,EAAA,SACAC,EAAA,YACAC,EAAA,UACAC,GAAA,WACAC,GAAA,YAGAC,GAAA,iCAeA,MAAAC,GACAC,gBAAAC,IAAoBA,EAAAC,QAAAC,OAAAC,MAAqBA,EAAAC,QACzC,MAAAC,EAAAF,IAAAF,EAAAK,YAAA,eAGA,OAFAN,EAAAO,UAAAC,IAAA,OAAAH,GACAL,EAAAS,cAAAF,UAAAC,IAAA,MAAAH,GACA,IAAAK,QAAAC,IACAC,WAAA,KACAZ,EAAAS,cAAAF,UAAAM,OAAA,MAAAR,GACAM,KACa,QAGbZ,QAAAE,MAAYA,EAAAC,OAAAC,MAAgBA,EAAAC,QAC5BH,EAAAK,YAAAH,IACAF,EAAAJ,KA3BA,SAAAM,EAAAW,GAGA,IAFA,IAAArC,EAAA,IAAAE,KAAAmC,EAAAX,EAAA,GACAN,KACApB,EAAAG,aAAAuB,GAAA,CACA,MAAAY,EAAA,IAAApC,KAAAF,GACAsC,EAAAC,SAAA,SACAnB,EAAAoB,KAAAF,GACAtC,EAAAyC,QAAAzC,EAAA0C,UAAA,GAEA,OAAAtB,EAkBAuB,CAAAjB,IAAAvB,WAAAuB,IAAArB,eACAmB,EAAAoB,SAAApB,EAAAJ,KAAA,GAAAyB,SACArB,EAAAsB,QAAA,IAAAC,MAAAvB,EAAAoB,UAAAI,KAAA,GACAxB,EAAAG,MAEAsB,KAAA,EAAAzB,MAAUA,EAAAC,OAAAC,MAAgBA,EAAAC,KAAAuB,YAAAC,iBAC1BC,oBAAiCzB,KACjCyB,IAAA,KAAA7C,EAAAmB,IAAAvB,aACAiD,IAAA,eACAA,IAAA,QAAAhC,EAAAiC,IAAAf,GACAc,IAAA,OAAAd,KAEAc,IAAA,UACA5B,EAAAsB,QAAAO,IAAA,IACAD,IAAA,gBAEA5B,EAAAJ,KAAAiC,IAAAf,GACAc,IAAAE,GACAtD,KAAAsC,EACAY,YACAC,uBAyBAG,GACAL,KAAA,EAAUxB,OAAAzB,KAASA,EAAAkD,YAAAC,iBACnBC,IAAA,SACAG,MAnBA,EAAAvD,EAAAkD,EAAAC,KACA,GAAAnD,GAAAkD,MAAAC,KACA,GAAAD,IAAAM,WAAAxD,EAAAwD,YAAAL,IACA,0BAEK,GAAAnD,GAAAkD,KAAAC,IAAA,CACL,GAAAD,IAAAM,WAAAxD,EAAAwD,UACA,mBACS,GAAAL,IAAAK,WAAAxD,EAAAwD,UACT,oBACS,GAAAxD,EAAAmD,KAAAnD,EAAAkD,IACT,qBAQAO,CAAAzD,EAAAkD,EAAAC,GACA7B,UACA,GAAA4B,IAEiB,GAAAA,MAAAC,IAAA,CACjBA,EAAAnD,GACA,MAAA0D,EAAAR,IACAS,EAAAR,IAEAQ,EAAAH,UAAAE,EAAAF,YACAN,EAAAS,GACAR,EAAAO,SAEiBR,KAAAC,MACjBA,EAAA,MACAD,EAAAlD,SAZAkD,EAAAlD,MAgBAoD,IAAA,UACAA,IAAA,OACAA,IAAA,UAAApD,EAAA0C,qBAMApB,UAAAE,MAAcA,IACdoC,SAAAC,oBAAA,QAAArC,EAAAsC,QAEAxC,QAAAE,MAAYA,EAAAC,OAAAsC,KAAgBA,EAAAC,cAAAC,mBAC5BzC,EAAA0C,KAAAC,KAAA,GAEA3C,EAAA4C,OAAA,CAAAC,IACAT,SAAAU,cAAAxC,UAAAyC,SAAA,sBAAA/C,EAAA0C,SACA1C,EAAA0C,MAAA1C,EAAA0C,QACAd,EAAAoB,EAAAC,YAIAjD,EAAAsC,MAAA,MACAtC,EAAA0C,MAAA,GACAd,EAAAoB,EAAAC,WAGAb,SAAAc,iBAAA,QAAAlD,EAAAsC,OAEA,MAAA9D,EAAA,IAAAE,KACAsB,EAAAmD,SAAAR,IAAAnE,GACAwB,EAAAoD,SAAApD,EAAAmD,SAAAtB,IAAA,IACAtD,EAAAyB,EAAAmD,aAGAnD,EAAAqD,OAAArD,EAAAoD,SAAAvB,IAAA,MAGA3B,MAAAF,EAAAmD,SACAhD,GAAA,IACAmD,IAAAtD,EAAAmD,WAAAnB,YAGA9B,MAAAF,EAAAoD,SACAjD,GAAA,IACAmD,IAAAtD,EAAAoD,WAAApB,aAKAhC,EAAA0B,UAAAiB,MACA3C,EAAA2B,WAAAgB,MAEA3C,EAAA2B,WAAAE,IAAA0B,IACAA,GACAhB,EAAAC,GAAAxC,EAAA0B,YACAa,EAAAE,GAAAzC,EAAA2B,eAEAY,EAAAC,GAAA,KACAD,EAAAE,GAAA,SAIAhB,KAAA,EAAUzB,OAAAmD,SAASA,EAAAC,WAAAC,SAAAX,OAAAE,SAAAY,WAAA9B,YAAAC,cAA4E1B,OAAAwD,YAAUA,MACzG7B,IAAA,eACA8B,QAAAb,KAAAc,oBAEA/B,IAAA,0BACAG,MAAAW,IAAA,WACAe,cACAC,QAAAd,EACAgB,QAAAhB,IAGAhB,IAAA,qBACAiC,eAAA,EAAA9D,IAAoCA,MACpCA,EAAAO,UAAAC,IAAA,YACA,IAAAE,QAAAC,IACAC,WAAAD,EAAA,UAIAkB,IAAA,aACAA,IAAA,0CACA9B,UACAqD,EA3NA,SAAA3E,GACA,MAAAC,EAAA,IAAAC,KAQA,OAPAF,EAAAG,WAAA,GACAF,EAAAG,YAAAJ,EAAAK,eACAJ,EAAAK,SAAAN,EAAAG,WAAA,KAEAF,EAAAK,SAAA,IACAL,EAAAG,YAAAJ,EAAAK,cAAA,IAEAJ,EAkNAqF,CAAAX,QAEyB,QAEzBvB,IAAA,sCACA9B,UACAqD,EAAA5E,EAAA4E,QAEyB,QAEzBvB,IAAA,QAAAuB,IAAAtE,eAEA+C,IAAA,oBAAAyB,IAAAxB,IAAAkC,GACAnC,IAAA/B,GACAK,MAAA6D,EAAA7D,MACAC,GAAA4D,EAAA5D,GACAmD,IAAAS,EAAAT,IACA5B,YACAC,sBC7OMqC,GACFC,SAAU,OACVC,YAAa,KACbC,cAAe,MAGbC,GACF3C,KADS,SACJ4C,GACF,OAAOzC,IAAE,oBACLA,IAAE0C,GACEb,YAAa,oBACblB,KAAMyB,EACNxB,YAAa,cACbC,cAAe,kBAEnBb,IAAE,QAAS2C,KAAKC,UAAUR,QAKrCpC,EAAAoB,EAAEyB,MAAMrC,SAASsC,KAAMN","file":"main.ac50.js","sourcesContent":["import m from 'mithril'\nimport stream from 'mithril/stream'\nimport './date-range-picker.css'\n\nfunction prevMonth(date) {\n    const newDate = new Date()\n    if (date.getMonth() > 0) {\n        newDate.setFullYear(date.getFullYear())\n        newDate.setMonth(date.getMonth() - 1)\n    } else {\n        newDate.setMonth(11)\n        newDate.setFullYear(date.getFullYear() - 1)\n    }\n    return newDate\n}\n\nfunction nextMonth(date) {\n    const newDate = new Date()\n    if (date.getMonth() < 11) {\n        newDate.setFullYear(date.getFullYear())\n        newDate.setMonth(date.getMonth() + 1)\n    } else {\n        newDate.setMonth(0)\n        newDate.setFullYear(date.getFullYear() + 1)\n    }\n    return newDate\n}\n\nconst monthsIndex = {\n    0: 'January',\n    1: 'February',\n    2: 'March',\n    3: 'April',\n    4: 'May',\n    5: 'June',\n    6: 'July',\n    7: 'August',\n    8: 'September',\n    9: 'October',\n    10: 'November',\n    11: 'December'\n}\n\nconst days = ['Su', 'M', 'Tu', 'W', 'Th', 'F', 'Sa']\n\nfunction getDaysInMonth(month, year) {\n    var date = new Date(year, month, 1);\n    var days = [];\n    while (date.getMonth() === month) {\n        const d = new Date(date)\n        d.setHours(0, 0, 0, 0)\n        days.push(d);\n        date.setDate(date.getDate() + 1);\n    }\n    return days;\n}\n\n\nconst month = {\n    onbeforeremove({ dom, state, attrs: { month, id } }) {\n        const className = month() < state.initialDate ? 'right' : 'left'\n        dom.classList.add('out-' + className)\n        dom.parentElement.classList.add('in-' + className)\n        return new Promise(resolve => {\n            setTimeout(() => {\n                dom.parentElement.classList.remove('in-' + className)\n                resolve()\n            }, 300)\n        })\n    },\n    oninit({ state, attrs: { month, id } }) {\n        state.initialDate = month()\n        state.days = getDaysInMonth(month().getMonth(), month().getFullYear())\n        state.startDay = state.days[0].getDay()\n        state.empties = new Array(state.startDay).fill(0)\n        state.id = id\n    },\n    view({ state, attrs: { month, id, firstDate, secondDate } }) {\n        return m(`.month.month-${id}`, [\n            m('h5', monthsIndex[month().getMonth()]),\n            m('.month-grid', [\n                m('.days', days.map(d => {\n                    return m('.day', d)\n                })),\n                m('.dates', [\n                    state.empties.map(() => {\n                        return m('.empty-date')\n                    }),\n                    state.days.map(d => {\n                        return m(date, {\n                            date: d,\n                            firstDate,\n                            secondDate\n                        })\n                    })\n                ])\n            ])\n        ])\n    }\n}\n\nconst setDateClassName = (date, firstDate, secondDate) => {\n    if (date && firstDate() && !secondDate()) {\n        if (firstDate().getTime() == date.getTime() && !secondDate()) {\n            return 'initial-date'\n        }\n    } else if (date && firstDate() && secondDate()) {\n        if (firstDate().getTime() == date.getTime()) {\n            return 'first-date'\n        } else if (secondDate().getTime() == date.getTime()) {\n            return 'second-date'\n        } else if (date < secondDate() && date > firstDate()) {\n            return 'in-between'\n        }\n    }\n}\n\nconst date = {\n    view({ attrs: { date, firstDate, secondDate } }) {\n        return m('.date', {\n            class: setDateClassName(date, firstDate, secondDate),\n            onclick() {\n                if (!firstDate()) {\n                    firstDate(date)\n                } else if (firstDate() && !secondDate()) {\n                    secondDate(date)\n                    const first = firstDate()\n                    const second = secondDate()\n\n                    if (second.getTime() < first.getTime()) {\n                        firstDate(second)\n                        secondDate(first)\n                    }\n                } else if (firstDate() && secondDate()) {\n                    secondDate(null)\n                    firstDate(date)\n                }\n            }\n        }, [\n            m('.shape'),\n            m('.bg'),\n            m('.number', date.getDate())\n        ])\n    }\n}\n\nexport default {\n    onremove({ state }) {\n        document.removeEventListener('click', state.close)\n    },\n    oninit({ state, attrs: { data, arrivalProp, departureProp } }) {\n        state.show = stream(false)\n\n        state.toggle = (e) => {\n            if (document.activeElement.classList.contains('date-range-input') && !state.show()) {\n                state.show(!state.show())\n                m.redraw()\n            }\n        }\n\n        state.close = () => {\n            state.show(false)\n            m.redraw()\n        }\n\n        document.addEventListener('click', state.close)\n\n        const date = new Date()\n        state.monthOne = stream(date)\n        state.monthTwo = state.monthOne.map(() => {\n            return nextMonth(state.monthOne())\n        })\n\n        state.months = state.monthTwo.map(() => {\n            return [\n                {\n                    month: state.monthOne,\n                    id: '1',\n                    key: state.monthOne().getTime(),\n                },\n                {\n                    month: state.monthTwo,\n                    id: '2',\n                    key: state.monthTwo().getTime(),\n                }\n            ]\n        })\n\n        state.firstDate = stream()\n        state.secondDate = stream()\n\n        state.secondDate.map(val => {\n            if (val){\n                data[arrivalProp] = state.firstDate()\n                data[departureProp] = state.secondDate()\n            } else {\n                data[arrivalProp] = null\n                data[departureProp] = null\n            }\n        })\n    },\n    view({ state: { monthOne, monthTwo, months, show, toggle, movement, firstDate, secondDate }, attrs: { placeholder } }) {\n        return m('.date-range', {\n            onclick: e => e.stopPropagation()\n        }, [\n                m('input.date-range-input', {\n                    class: show() ? 'focus' : '',\n                    placeholder,\n                    onclick: toggle,\n                    onfocus: toggle\n                }),\n                //show() &&\n                m('.calendar-display', {\n                    onbeforeremove({ dom }) {\n                        dom.classList.add(\"fade-out\")\n                        return new Promise(resolve => {\n                            setTimeout(resolve, 200)\n                        })\n                    }\n                }, [\n                        m('.triangle'),\n                        m('button.previous-month.month-navigation', {\n                            onclick() {\n                                monthOne(prevMonth(monthOne()))\n                            }\n                        }, 'Prev'),\n\n                        m('button.next-month.month-navigation', {\n                            onclick() {\n                                monthOne(nextMonth(monthOne()))\n                            }\n                        }, 'Next'),\n\n                        m('.year', monthOne().getFullYear()),\n\n                        m('.months-container', months().map(mon => {\n                            return m(month, {\n                                month: mon.month,\n                                id: mon.id,\n                                key: mon.key,\n                                firstDate,\n                                secondDate\n                            })\n                        }))\n                    ])\n            ])\n    }\n}","import m from 'mithril'\nimport './demo.css'\nimport dateRange from '../lib/date-range-picker'\n\nconst trip = {\n    location: 'Hull',\n    arrivalDate: null,\n    departureDate: null\n}\n\nconst demo = {\n    view(vnode) {\n       return m('.page-date-range', [\n           m(dateRange, {\n               placeholder: 'Arrival/Departure',\n               data: trip,\n               arrivalProp: 'arrivalDate',\n               departureProp: 'departureDate'\n           }),\n           m('.json', JSON.stringify(trip))\n       ])\n    }\n}\n\nm.mount(document.body, demo)\n\n"],"sourceRoot":""}